name: Build Native Binaries

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build Linux binary for ${{ matrix.arch }}
        run: |
          pyinstaller --onefile app.py --name fingertrack \
            --add-binary "$(python -c 'import cv2; import os; import glob; print(glob.glob(os.path.join(os.path.dirname(cv2.__file__), "cv2*.so"))[0])')":cv2 \
            --add-data "$(python -c 'import mediapipe as mp, os; print(os.path.join(os.path.dirname(mp.__file__), "modules"))')":mediapipe/modules

          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            mv dist/fingertrack dist/fingertrack-linux-amd64
          else
            mv dist/fingertrack dist/fingertrack-linux-arm64
          fi

      - name: Build onedir bundle for ${{ matrix.arch }}
        run: |
          pyinstaller --onedir app.py --name fingertrack \
            --add-binary "$(python -c 'import cv2; import os; import glob; print(glob.glob(os.path.join(os.path.dirname(cv2.__file__), "cv2*.so"))[0])')":cv2 \
            --add-data "$(python -c 'import mediapipe as mp, os; print(os.path.join(os.path.dirname(mp.__file__), "modules"))')":mediapipe/modules

          cd dist/fingertrack
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            zip -r ../fingertrack-linux-amd64-onedir.zip ./*
          else
            zip -r ../fingertrack-linux-arm64-onedir.zip ./*
          fi
          cd ..

      - name: Upload Linux binaries
        uses: actions/upload-artifact@v4
        with:
          name: fingertrack-linux-${{ matrix.arch == 'x86_64' && 'amd64' || matrix.arch }}
          path: dist/*

  build-darwin:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build binary for ${{ matrix.arch }}
        run: |
          pyinstaller --onefile app.py  --name fingertrack\
            --add-binary "$(python -c 'import cv2; import os; print(os.path.join(os.path.dirname(cv2.__file__), "cv2.abi3.so"))')":cv2 \
            --add-data "$(python -c 'import mediapipe as mp, os; print(os.path.join(os.path.dirname(mp.__file__), "modules"))')":mediapipe/modules

          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            mv dist/fingertrack dist/fingertrack-darwin-amd64
          else
            mv dist/fingertrack dist/fingertrack-darwin-arm64
          fi

      - name: Build onedir bundle for ${{ matrix.arch }}
        run: |
          pyinstaller --onedir app.py --name fingertrack \
            --add-binary "$(python -c 'import cv2; import os; print(os.path.join(os.path.dirname(cv2.__file__), "cv2.abi3.so"))')":cv2 \
            --add-data "$(python -c 'import mediapipe as mp, os; print(os.path.join(os.path.dirname(mp.__file__), "modules"))')":mediapipe/modules

          cd dist/fingertrack
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            zip -r ../fingertrack-darwin-amd64-onedir.zip ./*
          else
            zip -r ../fingertrack-darwin-arm64-onedir.zip ./*
          fi

      - name: Upload binaries as artifact
        uses: actions/upload-artifact@v4
        with:
          name: fingertrack-darwin-${{ matrix.arch == 'x86_64' && 'amd64' || matrix.arch }}
          path: dist/*

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build Windows binary
        shell: bash
        run: |
          pyinstaller --onefile app.py  --name fingertrack\
            --add-binary "$(python -c 'import cv2; import os; print(os.path.join(os.path.dirname(cv2.__file__), "cv2.pyd"))')":cv2 \
            --add-data "$(python -c 'import mediapipe as mp, os; print(os.path.join(os.path.dirname(mp.__file__), "modules"))')":mediapipe/modules
          mv dist/fingertrack.exe dist/fingertrack-windows-amd64.exe

      - name: Build Windows onedir
        shell: bash
        run: |
          pyinstaller --onedir app.py --name fingertrack \
            --add-binary "$(python -c 'import cv2; import os; print(os.path.join(os.path.dirname(cv2.__file__), "cv2.pyd"))')":cv2 \
            --add-data "$(python -c 'import mediapipe as mp, os; print(os.path.join(os.path.dirname(mp.__file__), "modules"))')":mediapipe/modules

      - name: Create Zip Archive
        shell: pwsh
        run: |
          $sourceFolder = "dist/fingertrack"
          $destination = "dist/fingertrack-windows-amd64-onedir.zip"
          if (Test-Path $destination) { Remove-Item $destination }
          # Compress only the contents, not the folder itself
          Get-ChildItem -Path $sourceFolder | Compress-Archive -DestinationPath $destination

      - name: Upload Windows binaries
        uses: actions/upload-artifact@v4
        with:
          name: fingertrack-windows-amd64
          path: dist/*

  release:
    needs: [build-linux, build-darwin, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all zipped artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: dist/*.zip

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
